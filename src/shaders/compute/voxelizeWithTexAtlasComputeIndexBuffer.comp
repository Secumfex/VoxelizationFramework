#version 430 core

// local work group size
layout (local_size_x = 1024) in;

// struct type of values accessed through vertex buffer
struct Vertex{
	float x;
	float y;
	float z;
};

// vertex buffer access
layout( std430, binding = 0 ) buffer Vert { Vertex vertices[ ]; } ;

// index buffer access
layout( std430, binding = 1 ) buffer Ind { uint indices[ ]; };

// vertex buffer access, voxel grid access and bitmask LUT access
//layout(std140, binding = 0) buffer vertBuffer {Vertex v[];} vertices;
layout(r32ui, binding = 0) uniform uimage2D uniformVoxelGrid;
layout(r32ui, binding = 1) uniform readonly uimage1D uniformBitmask;

// texture atlas containing world positions and transformation 
// matrix from world coordinates to voxel grid coordinates
uniform sampler2D uniformTextureAtlas;
uniform mat4      uniformWorldToVoxel;

void main()
{
	// determine which indices to read from
	uint gid = gl_GlobalInvocationID.x;
	
	// read indices of face; gid : current face, * 3 : first index of face, + N : offset to first index
	uint indexV0 = indices[ gid ];
	// read vertices of face
	Vertex vert = vertices[ indexV0 ];
	
	// read world position from texture atlas
	vec4 pos = texture(uniformTextureAtlas, vec2(vert.x, vert.y));
	
	// position in grid coordinates
	ivec3 gridPos = ivec3((uniformWorldToVoxel * pos).xyz);
	
	// read bitmask corresponding to depth index
	uint byte = imageLoad(uniformBitmask, gridPos.z).r;	
		
	// retrieve x / y coordinates of target texel
	ivec2 writeTo  = ivec2(gridPos.x, gridPos.y);
	
	// OR with value currently written in voxel grid texture
	uint before = imageAtomicOr(uniformVoxelGrid, writeTo , byte);
}