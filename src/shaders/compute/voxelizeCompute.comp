#version 430 core

// struct type of values accessed through vertex buffer
struct vertex {
	vec4 position;
};

// specify local work group size
// TODO work group size should be in a suitable relation to num of vertices
// TODO find suitable local size 
layout (local_size_x = 1024) in;

// vertex buffer access
layout(std430, binding = 0 ) buffer vertices { vertex v[ ]; };

// voxel grid texture ( format MUST be unsigned integer to make atomic operations work )
layout(binding = 1, r32ui) uniform image2D voxel_grid_texture;

// bit mask
layout(binding = 2, r32ui) uniform image1D bitmaskTexture;

// uniforms
uniform mat4 uniformModel;

uniform mat4 uniformVoxelizeView;
uniform mat4 uniformVoxelizeProjection;

uniform int uniformNumVertices;

void main()
{
// determine which vertex to read from
	uint gid = gl_GlobalInvocationID.x ;
	
//	// read vertex data
	vertex vert = v[ gid ];
	
	// compute world position
	vec4 pos = uniformModel * vert.position;
	
	// compute grid position
	vec4 perspGridPos = uniformVoxelizeProjection * uniformVoxelizeView * pos;
	
	// divide by homo coordinate
	vec4 gridPos = perspGridPos / perspGridPos.w;
	
	//TODO compute BYTE-value from GlobalInvocationID.Z
//	uint byte = texture(bitmaskTexture, gridPos.z);			
	
	//TODO OR with byte currently written in voxel grid texture
//	imageStore( voxel_grid_texture, gridPos.xy, byte);
	imageAtomicOr(voxel_grid_texture, gridPos.xy, byte);
}