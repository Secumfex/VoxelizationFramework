#version 430 core

// struct type of values accessed through vertex buffer
struct Vertex{
	float x;
	float y;
	float z;
};

// specify local work group size 
layout (local_size_x = 1024) in;

// vertex buffer access
layout( std430, binding = 0 ) buffer Vert { Vertex vertices[ ]; } ;

// index buffer access
layout( std430, binding = 1 ) buffer Ind { uint indices[ ]; };

// voxel grid texture ( format MUST be signle channel unsigned integer to make atomic operations work )
layout( r32ui, binding = 0 ) uniform uimage2D voxel_grid_texture;

// bit mask
layout( r32ui, binding = 1 ) uniform readonly uimage1D bitmaskTexture;

// uniforms
// model 
uniform mat4 uniformModel;

// voxel grid space
uniform mat4 uniformWorldToVoxel;

// true if boundingbox defined bbox and bbox + (1,1,1) overlaps plane defined by support point and normal
bool overlapsPlane( vec3 bbox, vec3 support, vec3 normal )
{
	// get diagonal corners of bbox with same direction as normal
	vec3 c0 = vec3( 0.0, 0.0, 0.0 );
	vec3 c1 = vec3( 0.0, 0.0, 0.0 );
	
	if ( normal.x > 0.0 )
	{
		c0.x = 1.0;
	}
	else
	{
		c1.x = 1.0;
	}
	
	if ( normal.y > 0.0 )
	{
		c0.y = 1.0;
	}
	else
	{
		c1.y = 1.0;
	}
	
	if ( normal.z > 0.0 )
	{
		c0.z = 1.0;
	}
	else
	{
		c1.z = 1.0;
	}
	
	// different sides of plane
	if ( ( dot( normal, bbox + c0 - support ) * dot( normal, bbox + c1 - support ) ) <= 0.0 )
	{
		return true;
	}
	
	// same sides of plane
	else
	{
		return false;
	}
}

// returns a value which allows one to determine whether a point is INSIDE or OUTSIDE of an edge
float edgeFunction( vec2 normal_i, vec2 vertex_i, vec2 point )
{
	return dot( normal_i , point - vertex_i);
}

// returns the edge normal that points to the INSIDE of the triangle
vec2 edgeNormal2D( vec2 v0, vec2 v1, float normalDir)
{
	// counter clock wise
	if ( normalDir > 0.0 )
	{
		return vec2( v0.y - v1.y , v1.x - v0.x );
	}
	else
	{
		//clock wise
		return vec2( v1.y - v0.y , v0.x - v1.x );
	}
	
}

// returns true if point in positive half space of normal
bool inside( vec2 normal_i, vec2 vertex_i, vec2 point )
{
		return ( edgeFunction ( normal_i, vertex_i, point ) >= 0.0 );
}

// returns the box corner pointing in the same direction as normal
vec2 criticalCorner( vec2 voxel, vec2 normal_i )
{
	// find corners with same direction
	vec2 criticalCorner = vec2( 0.0, 0.0 );
		
	if ( normal_i.x > 0.0 )
	{
		criticalCorner.x = 1.0;
	}
	if ( normal_i.y > 0.0 )
	{
		criticalCorner.y = 1.0;
	}
	
	return voxel + criticalCorner;
}

// returns true if point is INSIDE for ALL edge normals
bool overlapsVoxel2D( vec2 voxel, vec2 v0, vec2 v1, vec2 v2, float normalDir)
{
	// test against edge normal of edge e0 = v0 -> v1
	vec2 normal0 = edgeNormal2D( v0, v1, normalDir );
	vec2 critCorner0 = criticalCorner( voxel, normal0 );
	
	if ( !inside ( normal0, v0, critCorner0 ) )
	{
		return false;
	}

	// test against edge normal of edge e1 = v1 -> v2
	vec2 normal1 = edgeNormal2D( v1, v2, normalDir);
	vec2 critCorner1 = criticalCorner( voxel, normal1 );
	
	if ( !inside ( normal1, v1, critCorner1 ) )
	{
		return false;		
	}
	
	// test against edge normal of edge e2 = v2 -> v0
	vec2 normal2 = edgeNormal2D( v2, v0, normalDir );
	vec2 critCorner2 = criticalCorner( voxel, normal2 );
	
	if ( !inside ( normal2, v2, critCorner2 ) )
	{
		return false;
	}
	
	// ALL edge functions return INSIDE
	return true;
}

// test for 2D overlap
bool overlapsVoxel( vec3 voxel, vec3 v0, vec3 v1, vec3 v2, vec3 normal )
{
	// XY plane projection
	if ( !overlapsVoxel2D( voxel.xy, v0.xy, v1.xy, v2.xy, normal.z ) )
	{
		return false;
	}
	
	// YZ plane projection
	if (!overlapsVoxel2D( voxel.yz, v0.yz, v1.yz, v2.yz, normal.x ) )
	{
		return false;
	}
	
	// XZ plane projection
	if ( !overlapsVoxel2D( voxel.xz, v0.xz, v1.xz, v2.xz, normal.y ) )
	{
		return false;
	}
	
	// only possibility left
	return true;
}

//float dot2D( vec2 v0, vec2 v1)
//{
//	return (v0.x * v1.x + v0.y * v1.y);
//}

// fill a single voxel
void fillVoxel( vec3 voxel )
{
	// retrieve BYTE value from bitmask
	int depth = int ( voxel.z );
	uvec4 bitMask = imageLoad( bitmaskTexture, depth );			
	uint  byte = bitMask.r ;	
	
	// retrieve pixel position
	int x = int( voxel.x );
	int y = int( voxel.y );
	ivec2 writeTo  = ivec2( x, y );
	
	// OR with byte currently written in voxel grid texture
	uint before = imageAtomicOr( voxel_grid_texture, writeTo , byte );
}

// fills all voxels in the BBOX of vmin to vmax
void fillVoxels( vec3 vMin, vec3 vMax )
{
	for ( float x = vMin.x ; x <= vMax.x ; x += 1.0)
	{
		for ( float y = vMin.y ; y <= vMax.y ; y += 1.0)
		{
			for ( float z = vMin.z; z <= vMax.z; z += 1.0)
			{
				fillVoxel ( vec3( x, y, z ) );
			}
		}
	}
}

void main()
{
	// determine which indices to read from
	uint gid = gl_GlobalInvocationID.x;
	
	// read indices of face; gid : current face, * 3 : first index of face, + N : offset to first index
	uint indexV0 = indices[ gid * 3 + 0 ];
	uint indexV1 = indices[ gid * 3 + 1 ];
	uint indexV2 = indices[ gid * 3 + 2 ];
	
	// read vertices of face
	Vertex v0 = vertices[ indexV0 ];	
	Vertex v1 = vertices[ indexV1 ];	
	Vertex v2 = vertices[ indexV2 ];
	
	// compute grid position
	vec3 posV0 = ( uniformWorldToVoxel * uniformModel * vec4 ( v0.x, v0.y, v0.z, 1.0 ) ).xyz;
	vec3 posV1 = ( uniformWorldToVoxel * uniformModel * vec4 ( v1.x, v1.y, v1.z, 1.0 ) ).xyz;
	vec3 posV2 = ( uniformWorldToVoxel * uniformModel * vec4 ( v2.x, v2.y, v2.z, 1.0 ) ).xyz;
	
	// compute edges of triangle
	vec3 e01 = posV1 - posV0;
	vec3 e12 = posV2 - posV1;
	vec3 e20 = posV0 - posV2;
	
	// compute normal of triangle
	vec3 normal = normalize ( cross ( e01,e12 ) );
	
	// compute bounding box 
	vec3 bbMin = min( posV0, min ( posV1, posV2 ) );
	vec3 bbMax = max( posV0, max ( posV1, posV2 ) );
	
	// lowest voxel index
	vec3 vMin = vec3(
			floor ( bbMin.x ),
			floor ( bbMin.y ),
	        floor ( bbMin.z )
	        );
	
	// highest voxel index
	vec3 vMax = vec3(
			floor ( bbMax.x ),
	        floor ( bbMax.y ),
	        floor ( bbMax.z )
	        );
	
	// triangle covers only one voxel --> fill immediately
	if ( vMin == vMax )
	{
		fillVoxel ( vMin );
		return;
	}		
	
	// test which dimensions are set
	int dimensions = 0;
	bool dimX = false;
	bool dimY = false;
	bool dimZ = false;
	
	if ( ( vMax.x - vMin.x ) > 0.0 )
	{
		dimX = true;
		dimensions ++;
	}
	if ( ( vMax.y - vMin.y ) > 0.0 )
	{
		dimY = true;
		dimensions ++;
	}
	if ( ( vMax.z - vMin.z ) > 0.0 )
	{
		dimZ = true;
		dimensions++;
	}
	
	// only one line of voxels is overlapped
	if ( dimensions == 1 ) 
	{
		// fill all voxels from min to max
		fillVoxels( vMin, vMax);
		return;
	}
	
	// only one Slice is overlapped
	if ( dimensions == 2 ) 
	{	
		for ( float x = vMin.x; x <= vMax.x; x += 1.0f )
		{
			for ( float y = vMin.y; y <= vMax.y; y += 1.0f )
			{
				for ( float z = vMin.z; z <= vMax.z; z += 1.0f )
				{
					// current voxel
					vec3 voxel = vec3( x, y, z );
					
					// perform only corresponding 2D Projection test
					if ( dimX && dimY )
					{
						// XY plane projection
						if ( overlapsVoxel2D( voxel.xy, posV0.xy, posV1.xy, posV2.xy, normal.z ) )
						{
							fillVoxel( voxel );
						}
						continue;
					}
					
					if ( dimX && dimZ )
					{
						// XZ plane projection
						if ( overlapsVoxel2D( voxel.xz, posV0.xz, posV1.xz, posV2.xz, normal.y ) )
						{
							fillVoxel( voxel );							
						}
						continue;
					}
					
					if( dimY && dimZ )
					{
						// YZ plane projection
						if (overlapsVoxel2D( voxel.yz, posV0.yz, posV1.yz, posV2.yz, normal.x ) )
						{
							fillVoxel( voxel );							
						}	
					}
				}
			}
		}
	}
	
	// all three dimensions are set
	// compute overlapped voxels from bbox
	for ( float x = vMin.x; x <= vMax.x; x += 1.0f )
	{
		for ( float y = vMin.y; y <= vMax.y; y += 1.0f )
		{
			for ( float z = vMin.z; z <= vMax.z; z += 1.0f )
			{
				vec3 voxel = vec3( x, y, z );
				
				// test voxel defined by BBOX (x,y,z) / ( x+1, y+1, z+1 ) againts triangle plane
				if ( !overlapsPlane( voxel, posV0, normal ) )
				{
					// skip since overlap is impossible
					continue;
				}
				
				// test triangle to bbox by projection in main axes
				if ( !overlapsVoxel ( voxel, posV0, posV1, posV2, normal ) )
				{
					// skip since overlap has been disproven
					continue;
				}			
				
				// fill voxel since overlap could not be disproven
				fillVoxel ( voxel );
			}
		}
	}
}